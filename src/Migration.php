<?php
namespace Brianpando\Plantumlgen;
use File;

class Migration extends PlantFile{


    public function __construct($path=null){
        parent::__construct($path);
    }

    public function read_classes($plant_content){
        $class_pattern = "/class models.\w*\{\s*[\w*:\w*\s]*\}/i";
         preg_match_all($class_pattern,$plant_content,$classes);
         $classes=$classes[0];
         return $classes;
    }

    public function add_example_content(){
        $path=$this->base_path."/plantuml.pu";
        File::put($path,"@startuml\n".
        "class models.Author{\n".
            "\tname:string\n".
        "}\n".
        "class models.Book{\n".
            "title:string\n".
        "}\n".
        "@enduml");
        return true;
    }

    public function create_migration_file($class_content){
        $migration_path=$this->base_path."/database/migrations";
        $class_data=$this->get_class_data($class_content);
        //dd($class_data);
        $mode="create";
        if( $migration_files = $this->get_migrations_of($class_data->table_name) ){
                $class_data->fields=$this->extract_new_fields($migration_files,$class_data->table_name, $class_data->fields);
                $mode="update";
        }
        if( count($class_data->fields) >0 ){
            //4. crear un archivo de la clase y escribir el codigo de clase model.
            $migration_content=$this->migration_content($class_data->table_name,$class_data->fields, $mode );
            $datetime = new \Datetime();
            $filename=$datetime->format('Y_m_d_His')."_".$mode."_".$class_data->table_name;
            $filepath="$migration_path/".$filename.".php";
            File::put($filepath,$migration_content);
            if( File::exists($filepath) ) return $filepath;
            else throw new \Exception("file $filename. creation failed.");
        }else {
            return false;
        }
        return false;
    }

    public function get_class_data($class_content){
        $pattern="/class models.(\w*)\{\s*([\w*:\w*\s]*)\}/i";
        preg_match_all($pattern,$class_content,$clzz);
        $class_name=$clzz[1][0];
        $class_properties=$clzz[2][0];
        $pattern_properties="/(\w+:*\w+)\s*/";
        preg_match_all($pattern_properties,$class_properties,$props);    
        $fields = $props[1];
        //dd($fields);
        return (object)[
            'class_name'=>$class_name,
            'table_name'=>strtolower($class_name)."s",
            'fields'=>$props[1],
        ];
    }

    public function get_migrations_of($table_name){
        $migations_path=$this->base_path."/database/migrations";
        $dir=opendir($migations_path);
        $files=[];
        while($current = readdir($dir)){
            if( $current != "." && $current != "..") {
                    $content=File::get("$migations_path/$current");
                    if( preg_match("/Schema::create\('".$table_name."'/",$content) ){
                        $files[] = "$migations_path/$current";
                    } 
            }
        }
       
        return count($files)>0?$files:false;
    }

    function migration_content($table_name,$fields, $mode ){
        $content="<?php \n".
         "use Illuminate\Support\Facades\Schema;\n\n".
         "use Illuminate\Database\Schema\Blueprint;\n".
         "use Illuminate\Database\Migrations\Migration;\n".
         "//Generated By PlantUML Command\n".
         "class ".ucfirst($mode).ucfirst($table_name)." extends Migration{\n".
             "\tpublic function up(){ \n [up_content] \t} \n".
             "\tpublic function down(){\n [down_content]\t} \n".
        "}";
        $up_content=$this->fill_up_content($table_name, $fields, $mode);
        $down_content=$this->fill_down_content($table_name, $fields, $mode);
        $content=str_replace("[up_content]",$up_content,$content);
        $content=str_replace("[down_content]",$down_content,$content);
        return  $content;
    }
    
    function fill_up_content($table_name, $fields, $mode){
        $up_content="";
        if($mode=='create'){
            $up_content .= "\t\tSchema::create('$table_name', function (Blueprint \$table) { \n".
                        "\t\t\t\$table->bigIncrements('id');\n";
        }else{
            $up_content .= "\t\tSchema::table('$table_name', function (Blueprint \$table) { \n";
        }

        foreach($fields as $field){
                preg_match("/(\w+)\s*(\w+)/",$field, $fieldparts);
                //dd($fieldparts);
                if( count($fieldparts)!=3) {
                    throw new \Exception("class $table_name => field '$field' : type is undefined");  
                }
                $fieldname=$fieldparts[1];
                $fieldtype= $fieldparts[2];
                if($fieldname=='int') $fieldtype ="integer";
                $up_content.="\t\t\t\$table->$fieldtype('$fieldname');\n";
        }
        if($mode=='create') $up_content.="\t\t\t\$table->timestamps();\n";
        $up_content.="\t\t});\n";
        return $up_content;
    }

    function fill_down_content($table_name, $fields, $mode){
        $down_content="";
        if($mode=='create'){$down_content.="\t\tSchema::drop('$table_name');";}
        $down_content="\n";
        return $down_content;
    }
    function extract_new_fields($migrations_files, $table_name, $fields){
        foreach( $migrations_files as $file_path ){
            $table_content = File::get($file_path);
            preg_match_all("/Schema::\w*\('".$table_name."'\){\n(\.*)\n}/", $table_content);
            
            /*  Falta crear el cambio de tipo de dato */
            foreach($fields as $i => $field){
                $t=explode(" ",$field);
                $field_name=$t[0];
                $field_type=$t[1];
                if( preg_match_all("/('".$field_name."')/",$table_content)  ){
                    unset($fields[$i]);
                }
            }
            $fields = array_values($fields);
        }
        return $fields;
    }
}