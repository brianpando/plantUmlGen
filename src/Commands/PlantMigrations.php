<?php

namespace Vendor\plantumlgen\Commands;

use Illuminate\Console\Command;
use File;

class PlantMigrations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'plant:migrations';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate the migrations from models namespace';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            //1. leer el contenido del archivo plan
        $path=base_path()."/plantuml.txt";
        if(! File::exists($path) ) {
            $message = "File $path doesnt exist.";
            //throw new \Exception();
            $this->line("<fg=black;bg=red>ERROR:</>".$message);
            die();
        }
        $content = File::get($path);
         //2. poner las clases en un array de objetos.
         $class_pattern = "/class models.\w*\{\s*[\w*\s]*\}/";
         $model_path=base_path()."/app/Models";
         $migration_path=base_path()."/database/migrations";
         preg_match_all($class_pattern,$content,$classes);
         $classes=$classes[0];
         if(count($classes)<1 ){ 
            $message="None class found";
            $this->line("<fg=black;bg=red>ERROR:</>".$message);
            die();
         }
         $this->line(count($classes)." classes found:");
         $migration_content="<?php \n".
         "use Illuminate\Support\Facades\Schema;\n\n".
         "use Illuminate\Database\Schema\Blueprint;\n".
         "use Illuminate\Database\Migrations\Migration;\n".
         "//Generated By PlantUML Command\n".
         "class CreateAllTable extends Migration{\n".
             "\tpublic function up(){ \n [up_content] \t} \n".
             "\tpublic function down(){\n [down_content]\t} \n".
        "}";
         //3. recorrer la lista de clases.
         $up_content=$down_content="";
         foreach($classes as $class){
             
            $pattern="/class models.(\w*)\{\s*([\w*\s]*)\}/";
            preg_match_all($pattern,$class,$clzz);
            
            $class_name=$clzz[1][0];
            $table_name=strtolower($class_name)."s";
            $class_properties=$clzz[2][0];
            $pattern_properties="/(\w+\s*\w+)\n/";
            preg_match_all($pattern_properties,$class_properties,$props);
            
            $fields = $props[1];
           
            //4. crear un archivo de la clase y escribir el codigo de clase model.
            $up_content .= "\t\tSchema::create('$table_name', function (Blueprint \$table) { \n".
                    "\t\t\t\$table->bigIncrements('id');\n";
                    foreach($fields as $field){
                            preg_match("/(\w+)\s+(\w+)/",$field, $fieldparts);
                            if( count($fieldparts)!=3) {
                                throw new \Exception("class $class_name => field '$field' : type is undefined");  
                            }
                            $fieldname=$fieldparts[1];
                            $fieldtype= $fieldparts[2];
                            if($fieldname=='int') $fieldtype ="integer";
                            $up_content.="\t\t\t\$table->$fieldtype('$fieldname');\n";
                        
                        
                    }
                    $up_content.="\t\t\t\$table->timestamps();\n".
                    "\t\t});\n";
            $down_content.="\t\tSchema::drop('$table_name');\n";
        }
        $migration_content=str_replace("[up_content]",$up_content,$migration_content);
        $migration_content=str_replace("[down_content]",$down_content,$migration_content);
        $filename=date('Y_m_d')."_000000_create_all_tables";
        File::put("$migration_path/$filename.php",$migration_content);
        $this->line("<info>Created Migration:</info> $filename");
        } catch (\Exception $e) {
            $this->line("<fg=black;bg=red>ERROR:</> ".$e->getMessage());
        }
        
    }
}
