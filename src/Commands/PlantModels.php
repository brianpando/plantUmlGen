<?php

namespaceVendor\plantumlgen\Commands;

use Illuminate\Console\Command;
use File;

class PlantModels extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'plant:models';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate models by plantuml file';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        //1. leer el contenido del archivo plan
        $path=base_path()."/plantuml.txt";
        if(! File::exists($path) ) {
            $message = "File $path doesnt exist.";
            //throw new \Exception();
            $this->line("<fg=black;bg=red>ERROR:</>".$message);
            die();
        }
        $content = File::get($path);
        //2. poner las clases en un array de objetos.
        $class_pattern = "/class models.(\w*)\{/";
        $model_path=base_path()."/app/Models";
        preg_match_all($class_pattern,$content,$classes);
        if(count($classes)<=1 ){ 
            $message="None class found";
            $this->line("<fg=black;bg=red>ERROR:</>".$message);
            die();
         }
         
        File::isDirectory($model_path) or File::makeDirectory($model_path,0755, true,true);
        //3. recorrer la lista de clases.
        $classes = $classes[1];
       $this->line(count($classes)." classes found:");
        foreach($classes as $class_name){
            //4. crear un archivo de la clase y escribir el codigo de clase model.
            $class_content = "<?php \n".
            "namespace App\Models;\n\n".
            "use Illuminate\\Database\\Eloquent\\Model;\n".
            "//Generated By PlantUML Command\n".
            "class $class_name extends Model{\n}";
            File::put($model_path."/$class_name.php",$class_content);
            $this->line("=> class $class_name created.");
        }
        //5. poner las relaciones en una lista.
        $relationship_pattern = "/models.\w*\s*\"[\W\w]{1}\"\s*[\W|\w]{1}--\s*\"[\W|\w]{1}\"\s*models.\w*/";
        preg_match_all($relationship_pattern,$content,$relationships);
        //6. recorrer la lsita de relaciones
        foreach($relationships[0] as $relationship){
            $pattern = "/models.(\w*)\s*\"([\W|\w]{1})\"\s*([\W|\w]{1})--\s*\"([\W|\w]{1})\"\s*models.(\w*)/";
            preg_match($pattern,$relationship, $rel );
            $class1=$rel[1];
            $cardinality1=$rel[2];
            $linktype=$rel[3]; //composition (*) o agreggation (o)
            $cardinality2=$rel[4];
            $class2=$rel[5];
            $cardinality = $cardinality1.$cardinality2;
            
            //7. editar cada clase y agregar la relacion eloquent.
            $class1_content = File::get($model_path."/$class1.php");
            $class2_content = File::get($model_path."/$class2.php");
            $relationshipcode1 = $relationshipcode2 = null;
            switch($cardinality){
                case '11'://one to one
                    $relationshipcode1="public function ".strtolower($class2).'(){ return $this->hasOne(\'App\\Models\\'.$class2.'\'); }';
                    $relationshipcode2="public function ".strtolower($class1).'(){ return $this->belongsTo(\'App\\Models\\'.$class1.'\'); }';
                break;
                case '1*'://one to many
                    $relationshipcode1="public function ".strtolower($class2).'s(){ return $this->hasMany(\'App\\Models\\'.$class2.'\'); }';
                    $relationshipcode2="public function ".strtolower($class1).'(){ return $this->belongsTo(\'App\\Models\\'.$class1.'\'); }';
            
                break;
                
                case '**'://many to many
                    $relationshipcode1="public function ".strtolower($class2).'s(){ return $this->belongsToMany(\'App\\Models\\'.$class2.'\'); }';
                    $relationshipcode2="public function ".strtolower($class1).'s(){ return $this->belongsToMany(\'App\\Models\\'.$class1.'\'); }';
        
                break;
            }
            if( !is_null($relationshipcode1) ){
                $class1_content=preg_replace("/\}$/","$relationshipcode1\n}",$class1_content);
                $class2_content=preg_replace("/\}$/","$relationshipcode2\n}",$class2_content);
      
                File::put($model_path."/$class1.php",$class1_content);
                File::put($model_path."/$class2.php",$class2_content);
            }else{
                $this->line("Relationship undefined.");
            }
        }
        
        
        $this->line("<info>SUCCESS:</info>Models finished!");
    }
}
