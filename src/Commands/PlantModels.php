<?php

namespace Brianpando\Plantumlgen\Commands;

use Illuminate\Console\Command;
use File;

class PlantModels extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'plant:models';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate models by plantuml file';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        //1. leer el contenido del archivo plan
        $path=base_path()."/plantuml.pu";
        $tab = "    ";
        if(! File::exists($path) ) {
            $message = "File $path doesnt exist. We will try to create it.";
            //throw new \Exception();
            $this->line("<fg=black;bg=yellow>Warning:</>".$message);
            File::put($path,"@startuml\n@enduml");
            if(! File::exists($path)){
                $this->line("<fg=black;bg=yellow>ERROR:</>"."file $path couldn't be created.");
                die();
            }
            
        }
        $content = File::get($path);
        //2. poner las clases en un array de objetos.
        $class_pattern = "/class models.(\w*)\{/";
        $class_pattern="/class models.(\w*)\{\s*([\w*:\w*\s]*)\}/";
        $model_path=base_path()."/app/Models";
        preg_match_all($class_pattern,$content,$classes);
        if(count($classes)<=1 ){ 
            $message="None class found";
            $this->line("<fg=black;bg=red>ERROR:</>".$message);
            die();
        }
         
        File::isDirectory($model_path) or File::makeDirectory($model_path,0755, true,true);
        //3. recorrer la lista de clases.
        $classes = $classes[1];
        $this->line(count($classes)." classes found:");
        foreach($classes as $class_name){
            //4. crear un archivo de la clase y escribir el codigo de clase model.
            $class_content = "<?php\n\n".
            "namespace App\Models;\n\n".
            "use Illuminate\\Database\\Eloquent\\Model;\n\n".
            "//Generated By PlantUML Command\n".
            "class $class_name extends Model\n{\n}\n";
            File::put($model_path."/$class_name.php",$class_content);
            $this->line("=> class $class_name created.");
        }
        //5. agregar atributos del modelo.
        $class_pattern = "/class models.\w*\{\s*[\w*:\w*\s]*\}/";
        preg_match_all($class_pattern, $content, $classes);
        $classes_attr = $classes[0];
        $classes_attributes = $this->retrieveClassesAttributes($classes_attr);

        foreach ($classes_attributes as $classes_attribute) {
            $class_name = $classes_attribute['class_name'];
            $class_fields = $tab . "protected " . '$fillable = [' . "\n";
            
            foreach ($classes_attribute['fields'] as $field) {
                preg_match("/(\w+):\s*(\w+)/",$field, $fieldparts);
                if (!isset($fieldparts[1])) {
                    $this->line("The field " . $field . " is not correctly defined.");
                    die();
                }
                $class_fields .= $tab . $tab . "'" . $fieldparts[1] . "',\n";
            }
            $class_fields .= $tab . "];";
            $class_content = File::get($model_path."/$class_name.php");
            $class_attribute_content = preg_replace("/\}$/","$class_fields\n}",$class_content);
            File::put($model_path."/$class_name.php", $class_attribute_content);
        }
        //5. poner las relaciones en una lista.
        $relationship_pattern = "/models.\w*\s*\"[\W\w]{1}\"\s*[\W|\w]?--\s*[\W|\w]?\"[\W|\w]{1}\"\s*models.\w*/";
        preg_match_all($relationship_pattern,$content,$relationships);
        
        //6. recorrer la lsita de relaciones
        foreach($relationships[0] as $relationship){
            //$pattern = "/models.(\w*)\s*\"([\W|\w]{1})\"\s*([\W|\w]{1})--\s*\"([\W|\w]{1})\"\s*models.(\w*)/";
            $pattern = "/models.(\w*)\s*\"([\W|\w]{1})\"\s*([\W|\w]?)--\s*([\W|\w]?)\"([\W|\w]{1})\"\s*models.(\w*)/";
            preg_match($pattern,$relationship, $rel );
            $class1=$rel[1];
            $cardinality1=$rel[2];
            $cardinality2=$rel[5];
            $class2=$rel[6];
            $cardinality = $cardinality1.$cardinality2;
            //7. editar cada clase y agregar la relacion eloquent.
            $class1_content = File::get($model_path."/$class1.php");
            $class2_content = File::get($model_path."/$class2.php");
            $relationshipcode1 = $relationshipcode2 = null;
            switch ($cardinality) {
                case '11'://one to one
                    $relationshipcode1="\n" . $tab . "public function " . strtolower($class2) . "()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->hasOne' . '(\App\\Models\\' . $class2 . ");\n" . $tab . "}";
                    $relationshipcode2="\n" . $tab . "public function " . strtolower($class1) . "()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->belongsTo' . '(\'App\\Models\\' . $class1 . "');\n" . $tab . "}";
                break;
                case '1*'://one to many
                    $relationshipcode1="\n" . $tab . "public function " . strtolower($class2) . "s()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->hasMany' . '(\'App\\Models\\' . $class2 . "');\n" . $tab . "}";
                    $relationshipcode2="\n" . $tab . "public function " . strtolower($class1) . "()\n" . $tab . "{\n" . $tab . $tab . "return" .  ' $this->belongsTo' . '(\'App\\Models\\' . $class1 . "');\n" . $tab . "}";
            
                break;
                
                case '**'://many to many
                    $relationshipcode1="\n" . $tab . "public function " . strtolower($class2) . "s()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->belongsToMany' . '(\'App\\Models\\' . $class2 . "');\n" . $tab . "}";
                    $relationshipcode2="\n" . $tab . "public function " . strtolower($class1) . "s()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->belongsToMany' . '(\'App\\Models\\' . $class1 . "');\n" . $tab . "}";
        
                break;
            }
            if( !is_null($relationshipcode1) ){
                $class1_content=preg_replace("/\}$/","$relationshipcode1\n}",$class1_content);
                $class2_content=preg_replace("/\}$/","$relationshipcode2\n}",$class2_content);
                File::put($model_path."/$class1.php",$class1_content);
                File::put($model_path."/$class2.php",$class2_content);
            }else{
                $this->line("Relationship undefined.");
            }

            $content_file = file_get_contents($model_path."/$class2.php");
            if ($rel[3] == '*') {
                $relation = "\n" . $tab . "public function " . strtolower($class1) . "()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->belongsTo' . '(\'App\\Models\\' . $class1 . "');\n" . $tab . "}";
                if (strpos($content_file, $relation) === false) {
                    $class2_content=preg_replace("/\}$/","$relation\n}",$class2_content);
                    File::put($model_path."/$class2.php",$class2_content);
                }
            } elseif ($rel[4] == '*') {
                $relation = "\n" . $tab . "public function " . strtolower($class2) . "()\n" . $tab . "{\n" . $tab . $tab . "return" . ' $this->belongsTo' . '(\'App\\Models\\' . $class2 . "');\n" . $tab . "}";
                if (strpos($content_file, $relation) === false) {
                    $class1_content=preg_replace("/\}$/","$relation\n}",$class1_content);
                    File::put($model_path."/$class1.php",$class1_content);
                }
            }
        }
        
        
        $this->line("<info>SUCCESS:</info>Models finished!");
    }

    public function retrieveClassesAttributes(array $classes)
    {
        $classes_attributes = [];
        
        foreach ($classes as $key => $class) {
            $attributes_pattern = "/class models.(\w*)\{\s*([\w*:\w*\s]*)\}/";
            preg_match_all($attributes_pattern,$class,$clzz);
            $class_name=$clzz[1][0];
            $class_properties=$clzz[2][0];
            $pattern_properties="/(\w+:*\w+)\s*/";
            preg_match_all($pattern_properties,$class_properties,$props);
            $fields = $props[1];
            $classes_attributes[] = [
                'class_name' => $class_name,
                'fields' => $props[1],
            ];
        }
        return $classes_attributes;
    }
}
